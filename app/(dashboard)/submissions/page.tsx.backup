// app/(dashboard)/submissions/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Checkbox } from '@/components/ui/checkbox'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { 
  Upload, Send, CheckCircle, XCircle, Clock, FileText, 
  Users, Building, Filter, Download, Search, Plus,
  TrendingUp, AlertCircle, Mail
} from 'lucide-react'
import { toast } from '@/components/ui/use-toast'

interface CVSubmission {
  id: string
  candidateId: string
  candidateName: string
  jobId: string
  jobTitle: string
  clientName: string
  submissionDate: string
  status: 'Pending' | 'Accepted' | 'Rejected' | 'Interview'
  clientFeedback: string
  submittedBy: string
}

interface BulkSubmission {
  jobId: string
  jobTitle: string
  clientName: string
  candidateIds: string[]
  submittedBy: string
  notes: string
}

export default function CVSubmissionTrackerPage() {
  const [submissions, setSubmissions] = useState<CVSubmission[]>([])
  const [jobs, setJobs] = useState<any[]>([])
  const [candidates, setCandidates] = useState<any[]>([])
  const [selectedJob, setSelectedJob] = useState<string>('')
  const [selectedCandidates, setSelectedCandidates] = useState<string[]>([])
  const [filterStatus, setFilterStatus] = useState<string>('all')
  const [searchTerm, setSearchTerm] = useState('')
  const [isBulkDialogOpen, setIsBulkDialogOpen] = useState(false)
  const [loading, setLoading] = useState(true)
  const [submissionNotes, setSubmissionNotes] = useState('')

  const supabase = createClient()

  useEffect(() => {
    fetchData()
  }, [])

  const fetchData = async () => {
    try {
      // Fetch submissions
      const { data: submissionsData } = await supabase
        .from('cv_submissions')
        .select(`
          *,
          candidates:candidate_id (
            id,
            first_name,
            last_name,
            email,
            phone
          ),
          jobs:job_id (
            id,
            title,
            job_code,
            clients:client_id (
              company_name
            )
          )
        `)
        .order('submission_date', { ascending: false })

      // Fetch jobs for dropdown
      const { data: jobsData } = await supabase
        .from('jobs')
        .select(`
          *,
          clients:client_id (
            company_name
          )
        `)
        .eq('status', 'open')

      // Fetch candidates for selection
      const { data: candidatesData } = await supabase
        .from('candidates')
        .select('*')
        .eq('status', 'active')

      if (submissionsData) {
        const mappedSubmissions = submissionsData.map(sub => ({
          id: sub.id,
          candidateId: sub.candidate_id,
          candidateName: `${sub.candidates?.first_name} ${sub.candidates?.last_name}`,
          jobId: sub.job_id,
          jobTitle: sub.jobs?.title || '',
          clientName: sub.jobs?.clients?.company_name || '',
          submissionDate: sub.submission_date,
          status: sub.status as CVSubmission['status'],
          clientFeedback: sub.client_feedback || '',
          submittedBy: sub.submitted_by || ''
        }))
        setSubmissions(mappedSubmissions)
      }

      if (jobsData) setJobs(jobsData)
      if (candidatesData) setCandidates(candidatesData)

    } catch (error) {
      console.error('Error fetching data:', error)
      toast({
        title: "Error",
        description: "Failed to fetch submissions data",
        variant: "destructive"
      })
    } finally {
      setLoading(false)
    }
  }

  const handleBulkSubmission = async () => {
    if (!selectedJob || selectedCandidates.length === 0) {
      toast({
        title: "Missing Information",
        description: "Please select a job and at least one candidate",
        variant: "destructive"
      })
      return
    }

    try {
      const submissionData = selectedCandidates.map(candidateId => ({
        job_id: selectedJob,
        candidate_id: candidateId,
        submission_date: new Date().toISOString(),
        status: 'Pending',
        submitted_by: 'Current User', // Replace with actual user
        client_feedback: submissionNotes
      }))

      const { error } = await supabase
        .from('cv_submissions')
        .insert(submissionData)

      if (error) throw error

      toast({
        title: "Success",
        description: `${selectedCandidates.length} CVs submitted successfully`,
      })

      setIsBulkDialogOpen(false)
      setSelectedCandidates([])
      setSelectedJob('')
      setSubmissionNotes('')
      fetchData()

    } catch (error) {
      console.error('Error submitting CVs:', error)
      toast({
        title: "Error",
        description: "Failed to submit CVs",
        variant: "destructive"
      })
    }
  }

  const updateSubmissionStatus = async (submissionId: string, newStatus: string) => {
    try {
      const { error } = await supabase
        .from('cv_submissions')
        .update({ status: newStatus })
        .eq('id', submissionId)

      if (error) throw error

      toast({
        title: "Status Updated",
        description: `Submission status changed to ${newStatus}`
      })

      fetchData()
    } catch (error) {
      console.error('Error updating status:', error)
      toast({
        title: "Error",
        description: "Failed to update status",
        variant: "destructive"
      })
    }
  }

  const exportSubmissions = () => {
    const csv = [
      ['Date', 'Candidate', 'Job', 'Client', 'Status', 'Submitted By'],
      ...submissions.map(s => [
        new Date(s.submissionDate).toLocaleDateString(),
        s.candidateName,
        s.jobTitle,
        s.clientName,
        s.status,
        s.submittedBy
      ])
    ].map(row => row.join(',')).join('\n')

    const blob = new Blob([csv], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `cv_submissions_${new Date().toISOString().split('T')[0]}.csv`
    a.click()
  }

  // Filter submissions
  const filteredSubmissions = submissions.filter(sub => {
    const matchesStatus = filterStatus === 'all' || sub.status === filterStatus
    const matchesSearch = sub.candidateName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         sub.jobTitle.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         sub.clientName.toLowerCase().includes(searchTerm.toLowerCase())
    return matchesStatus && matchesSearch
  })

  // Calculate statistics
  const stats = {
    total: submissions.length,
    pending: submissions.filter(s => s.status === 'Pending').length,
    accepted: submissions.filter(s => s.status === 'Accepted').length,
    rejected: submissions.filter(s => s.status === 'Rejected').length,
    interview: submissions.filter(s => s.status === 'Interview').length,
    acceptanceRate: submissions.length > 0 
      ? ((submissions.filter(s => s.status === 'Accepted' || s.status === 'Interview').length / submissions.length) * 100).toFixed(1)
      : '0'
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'Accepted':
      case 'Interview':
        return <CheckCircle className="text-green-600" size={16} />
      case 'Rejected':
        return <XCircle className="text-red-600" size={16} />
      default:
        return <Clock className="text-yellow-600" size={16} />
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Accepted':
        return 'bg-green-100 text-green-800'
      case 'Interview':
        return 'bg-blue-100 text-blue-800'
      case 'Rejected':
        return 'bg-red-100 text-red-800'
      default:
        return 'bg-yellow-100 text-yellow-800'
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-lg">Loading submissions...</div>
      </div>
    )
  }

  return (
    <div className="p-8 max-w-[1600px] mx-auto">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">CV Submission Tracker</h1>
            <p className="text-gray-600 mt-1">Track and manage bulk CV submissions to clients</p>
          </div>
          <div className="flex gap-3">
            <Button onClick={exportSubmissions} variant="outline">
              <Download className="mr-2" size={16} />
              Export CSV
            </Button>
            <Dialog open={isBulkDialogOpen} onOpenChange={setIsBulkDialogOpen}>
              <DialogTrigger asChild>
                <Button className="bg-purple-600 hover:bg-purple-700">
                  <Upload className="mr-2" size={16} />
                  Bulk Submit CVs
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-2xl">
                <DialogHeader>
                  <DialogTitle>Bulk CV Submission</DialogTitle>
                </DialogHeader>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="job-select">Select Job Position</Label>
                    <Select value={selectedJob} onValueChange={setSelectedJob}>
                      <SelectTrigger id="job-select">
                        <SelectValue placeholder="Choose a job position" />
                      </SelectTrigger>
                      <SelectContent>
                        {jobs.map(job => (
                          <SelectItem key={job.id} value={job.id}>
                            <div>
                              <div className="font-medium">{job.title}</div>
                              <div className="text-xs text-gray-500">
                                {job.clients?.company_name} - {job.location}
                              </div>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label>Select Candidates ({selectedCandidates.length} selected)</Label>
                    <div className="border rounded-lg p-3 max-h-64 overflow-y-auto space-y-2">
                      {candidates.map(candidate => (
                        <div key={candidate.id} className="flex items-center space-x-2">
                          <Checkbox
                            id={`candidate-${candidate.id}`}
                            checked={selectedCandidates.includes(candidate.id)}
                            onCheckedChange={(checked) => {
                              if (checked) {
                                setSelectedCandidates([...selectedCandidates, candidate.id])
                              } else {
                                setSelectedCandidates(selectedCandidates.filter(id => id !== candidate.id))
                              }
                            }}
                          />
                          <Label 
                            htmlFor={`candidate-${candidate.id}`}
                            className="flex-1 cursor-pointer"
                          >
                            <div>
                              <p className="font-medium">
                                {candidate.first_name} {candidate.last_name}
                              </p>
                              <p className="text-xs text-gray-500">
                                {candidate.job_title} at {candidate.current_company}
                              </p>
                            </div>
                          </Label>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="submission-notes">Submission Notes</Label>
                    <Textarea
                      id="submission-notes"
                      placeholder="Add any notes about this submission..."
                      value={submissionNotes}
                      onChange={(e) => setSubmissionNotes(e.target.value)}
                    />
                  </div>

                  <div className="flex justify-end gap-3">
                    <Button 
                      variant="outline" 
                      onClick={() => setIsBulkDialogOpen(false)}
                    >
                      Cancel
                    </Button>
                    <Button 
                      onClick={handleBulkSubmission}
                      className="bg-purple-600 hover:bg-purple-700"
                    >
                      <Send className="mr-2" size={16} />
                      Submit {selectedCandidates.length} CVs
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-5 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Submitted</p>
                <p className="text-2xl font-bold">{stats.total}</p>
              </div>
              <FileText className="text-gray-400" size={24} />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Pending Review</p>
                <p className="text-2xl font-bold text-yellow-600">{stats.pending}</p>
              </div>
              <Clock className="text-yellow-600" size={24} />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Accepted</p>
                <p className="text-2xl font-bold text-green-600">{stats.accepted}</p>
              </div>
              <CheckCircle className="text-green-600" size={24} />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Interview Stage</p>
                <p className="text-2xl font-bold text-blue-600">{stats.interview}</p>
              </div>
              <Users className="text-blue-600" size={24} />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Success Rate</p>
                <p className="text-2xl font-bold text-purple-600">{stats.acceptanceRate}%</p>
              </div>
              <TrendingUp className="text-purple-600" size={24} />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters and Search */}
      <Card className="mb-6">
        <CardContent className="p-4">
          <div className="flex items-center gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                <Input
                  placeholder="Search by candidate, job, or client..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <Select value={filterStatus} onValueChange={setFilterStatus}>
              <SelectTrigger className="w-48">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="Pending">Pending</SelectItem>
                <SelectItem value="Accepted">Accepted</SelectItem>
                <SelectItem value="Interview">Interview</SelectItem>
                <SelectItem value="Rejected">Rejected</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Submissions Table */}
      <Card>
        <CardHeader>
          <CardTitle>Recent Submissions</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="p-3 text-left text-sm font-medium text-gray-700">Date</th>
                  <th className="p-3 text-left text-sm font-medium text-gray-700">Candidate</th>
                  <th className="p-3 text-left text-sm font-medium text-gray-700">Position</th>
                  <th className="p-3 text-left text-sm font-medium text-gray-700">Client</th>
                  <th className="p-3 text-left text-sm font-medium text-gray-700">Status</th>
                  <th className="p-3 text-left text-sm font-medium text-gray-700">Submitted By</th>
                  <th className="p-3 text-left text-sm font-medium text-gray-700">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredSubmissions.map((submission) => (
                  <tr key={submission.id} className="border-b hover:bg-gray-50">
                    <td className="p-3 text-sm">
                      {new Date(submission.submissionDate).toLocaleDateString()}
                    </td>
                    <td className="p-3">
                      <p className="font-medium text-sm">{submission.candidateName}</p>
                    </td>
                    <td className="p-3 text-sm">{submission.jobTitle}</td>
                    <td className="p-3 text-sm">{submission.clientName}</td>
                    <td className="p-3">
                      <Badge className={getStatusColor(submission.status)}>
                        <span className="flex items-center gap-1">
                          {getStatusIcon(submission.status)}
                          {submission.status}
                        </span>
                      </Badge>
                    </td>
                    <td className="p-3 text-sm">{submission.submittedBy}</td>
                    <td className="p-3">
                      <Select
                        value={submission.status}
                        onValueChange={(value) => updateSubmissionStatus(submission.id, value)}
                      >
                        <SelectTrigger className="w-32 h-8">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Pending">Pending</SelectItem>
                          <SelectItem value="Accepted">Accepted</SelectItem>
                          <SelectItem value="Interview">Interview</SelectItem>
                          <SelectItem value="Rejected">Rejected</SelectItem>
                        </SelectContent>
                      </Select>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            {filteredSubmissions.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                No submissions found matching your criteria
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}