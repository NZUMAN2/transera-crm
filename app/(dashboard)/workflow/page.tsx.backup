// app/(dashboard)/workflow/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { 
  ArrowRight, CheckCircle, XCircle, Clock, User, Building, 
  MapPin, Phone, Mail, Calendar, DollarSign, FileText, ChevronRight 
} from 'lucide-react'
import { toast } from '@/components/ui/use-toast'
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd'

interface Candidate {
  id: string
  candidateId: string
  name: string
  email: string
  phone: string
  position: string
  client: string
  location: string
  currentStage: string
  submittedDate: string
  notes: string
}

interface WorkflowStage {
  id: string
  name: string
  color: string
  icon: any
  candidates: Candidate[]
  actions: string[]
}

export default function WorkflowManagementPage() {
  const [stages, setStages] = useState<WorkflowStage[]>([
    {
      id: 'sourcing',
      name: 'Sourcing',
      color: 'bg-gray-100 border-gray-300',
      icon: User,
      candidates: [],
      actions: ['Add to pipeline', 'Schedule screening']
    },
    {
      id: 'cv_submitted',
      name: 'CV Submitted',
      color: 'bg-blue-100 border-blue-300',
      icon: FileText,
      candidates: [],
      actions: ['Mark as accepted', 'Mark as declined', 'Request more info']
    },
    {
      id: 'cv_accepted',
      name: 'CV Accepted',
      color: 'bg-green-100 border-green-300',
      icon: CheckCircle,
      candidates: [],
      actions: ['Schedule 1st interview', 'Send to client']
    },
    {
      id: 'first_round',
      name: '1st Round',
      color: 'bg-purple-100 border-purple-300',
      icon: Calendar,
      candidates: [],
      actions: ['Pass to testing', 'Schedule 2nd round', 'Reject']
    },
    {
      id: 'testing',
      name: 'Testing',
      color: 'bg-yellow-100 border-yellow-300',
      icon: FileText,
      candidates: [],
      actions: ['Pass to 2nd round', 'Fail', 'Retest']
    },
    {
      id: 'second_round',
      name: '2nd Round',
      color: 'bg-indigo-100 border-indigo-300',
      icon: Calendar,
      candidates: [],
      actions: ['Pass to 3rd round', 'Pass to role play', 'Make offer', 'Reject']
    },
    {
      id: 'third_round',
      name: '3rd Round',
      color: 'bg-pink-100 border-pink-300',
      icon: Calendar,
      candidates: [],
      actions: ['Pass to role play', 'Make offer', 'Reject']
    },
    {
      id: 'role_play',
      name: 'Role Play',
      color: 'bg-orange-100 border-orange-300',
      icon: User,
      candidates: [],
      actions: ['Make offer', 'Reject', 'Schedule follow-up']
    },
    {
      id: 'offer',
      name: 'Offer Stage',
      color: 'bg-teal-100 border-teal-300',
      icon: DollarSign,
      candidates: [],
      actions: ['Accept offer', 'Decline offer', 'Negotiate']
    },
    {
      id: 'placed',
      name: 'Placed',
      color: 'bg-green-500 border-green-600 text-white',
      icon: CheckCircle,
      candidates: [],
      actions: ['Generate invoice', 'Update start date']
    }
  ])

  const [selectedCandidate, setSelectedCandidate] = useState<Candidate | null>(null)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [loading, setLoading] = useState(true)

  const supabase = createClient()

  useEffect(() => {
    fetchCandidatesInPipeline()
  }, [])

  const fetchCandidatesInPipeline = async () => {
    try {
      const { data: pipeline } = await supabase
        .from('candidate_pipeline')
        .select(`
          *,
          candidates:candidate_id (
            id,
            first_name,
            last_name,
            email,
            phone,
            current_company,
            job_title
          ),
          jobs:job_id (
            id,
            title,
            job_code,
            location
          ),
          clients:client_id (
            id,
            company_name
          )
        `)
        .order('cv_submitted', { ascending: false })

      if (pipeline) {
        // Map pipeline data to workflow stages
        const mappedCandidates = pipeline.map(item => ({
          id: item.id,
          candidateId: item.candidate_id,
          name: `${item.candidates?.first_name} ${item.candidates?.last_name}`,
          email: item.candidates?.email || '',
          phone: item.candidates?.phone || '',
          position: item.jobs?.title || '',
          client: item.clients?.company_name || '',
          location: item.jobs?.location || '',
          currentStage: item.current_stage || 'sourcing',
          submittedDate: item.cv_submitted || new Date().toISOString(),
          notes: item.notes || ''
        }))

        // Distribute candidates to their stages
        const updatedStages = stages.map(stage => ({
          ...stage,
          candidates: mappedCandidates.filter(c => 
            c.currentStage.toLowerCase().replace(' ', '_') === stage.id
          )
        }))

        setStages(updatedStages)
      }
    } catch (error) {
      console.error('Error fetching pipeline:', error)
      toast({
        title: "Error",
        description: "Failed to fetch candidates",
        variant: "destructive"
      })
    } finally {
      setLoading(false)
    }
  }

  const handleDragEnd = async (result: any) => {
    if (!result.destination) return

    const { source, destination, draggableId } = result
    
    if (source.droppableId === destination.droppableId) return

    // Find the candidate
    const sourceStage = stages.find(s => s.id === source.droppableId)
    const destStage = stages.find(s => s.id === destination.droppableId)
    const candidate = sourceStage?.candidates.find(c => c.id === draggableId)

    if (!candidate || !destStage) return

    // Update local state
    const newStages = stages.map(stage => {
      if (stage.id === source.droppableId) {
        return {
          ...stage,
          candidates: stage.candidates.filter(c => c.id !== draggableId)
        }
      }
      if (stage.id === destination.droppableId) {
        return {
          ...stage,
          candidates: [...stage.candidates, { ...candidate, currentStage: stage.id }]
        }
      }
      return stage
    })

    setStages(newStages)

    // Update database
    try {
      const updateData: any = {
        current_stage: destStage.name,
        updated_at: new Date().toISOString()
      }

      // Set specific date fields based on stage
      switch (destStage.id) {
        case 'cv_accepted':
          updateData.cv_accepted = true
          break
        case 'first_round':
          updateData.first_round = new Date().toISOString()
          break
        case 'testing':
          updateData.testing_date = new Date().toISOString()
          break
        case 'second_round':
          updateData.second_round = new Date().toISOString()
          break
        case 'third_round':
          updateData.third_round = new Date().toISOString()
          break
        case 'role_play':
          updateData.role_play = new Date().toISOString()
          break
        case 'offer':
          updateData.offered_date = new Date().toISOString()
          break
        case 'placed':
          updateData.offer_accepted = true
          updateData.start_date = new Date().toISOString()
          break
      }

      const { error } = await supabase
        .from('candidate_pipeline')
        .update(updateData)
        .eq('id', candidate.id)

      if (error) throw error

      toast({
        title: "Stage Updated",
        description: `${candidate.name} moved to ${destStage.name}`
      })
    } catch (error) {
      console.error('Error updating stage:', error)
      toast({
        title: "Error",
        description: "Failed to update candidate stage",
        variant: "destructive"
      })
      // Revert on error
      setStages(stages)
    }
  }

  const performAction = async (action: string, candidate: Candidate, stage: WorkflowStage) => {
    // Handle different actions
    switch (action) {
      case 'Mark as accepted':
        await updateCandidateStatus(candidate.id, { cv_accepted: true })
        break
      case 'Mark as declined':
        await updateCandidateStatus(candidate.id, { cv_declined: true })
        break
      case 'Schedule 1st interview':
        // Open scheduling dialog
        setSelectedCandidate(candidate)
        setIsDialogOpen(true)
        break
      // Add more action handlers as needed
      default:
        toast({
          title: "Action",
          description: `${action} for ${candidate.name}`
        })
    }
  }

  const updateCandidateStatus = async (candidateId: string, updates: any) => {
    try {
      const { error } = await supabase
        .from('candidate_pipeline')
        .update(updates)
        .eq('id', candidateId)

      if (error) throw error

      toast({
        title: "Status Updated",
        description: "Candidate status has been updated"
      })
      
      fetchCandidatesInPipeline()
    } catch (error) {
      console.error('Error updating status:', error)
      toast({
        title: "Error",
        description: "Failed to update status",
        variant: "destructive"
      })
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-lg">Loading workflow...</div>
      </div>
    )
  }

  return (
    <div className="p-4 max-w-[1800px] mx-auto">
      {/* Header */}
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-gray-900">Recruitment Workflow</h1>
        <p className="text-gray-600 mt-1">Drag and drop candidates between stages</p>
      </div>

      {/* Stats Bar */}
      <div className="grid grid-cols-5 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-purple-600">
              {stages.reduce((sum, stage) => sum + stage.candidates.length, 0)}
            </div>
            <p className="text-sm text-gray-600">Total in Pipeline</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-blue-600">
              {stages.find(s => s.id === 'cv_submitted')?.candidates.length || 0}
            </div>
            <p className="text-sm text-gray-600">Awaiting Review</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-yellow-600">
              {stages.filter(s => ['first_round', 'second_round', 'third_round'].includes(s.id))
                .reduce((sum, stage) => sum + stage.candidates.length, 0)}
            </div>
            <p className="text-sm text-gray-600">In Interview</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-teal-600">
              {stages.find(s => s.id === 'offer')?.candidates.length || 0}
            </div>
            <p className="text-sm text-gray-600">Offers Pending</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-green-600">
              {stages.find(s => s.id === 'placed')?.candidates.length || 0}
            </div>
            <p className="text-sm text-gray-600">Placed</p>
          </CardContent>
        </Card>
      </div>

      {/* Workflow Pipeline */}
      <DragDropContext onDragEnd={handleDragEnd}>
        <div className="flex gap-3 overflow-x-auto pb-4">
          {stages.map((stage, index) => (
            <div key={stage.id} className="flex-shrink-0">
              <Card className={`w-64 border-2 ${stage.color}`}>
                <CardHeader className="p-3">
                  <CardTitle className="text-sm flex items-center justify-between">
                    <div className="flex items-center">
                      <stage.icon size={16} className="mr-2" />
                      {stage.name}
                    </div>
                    <Badge variant="secondary">{stage.candidates.length}</Badge>
                  </CardTitle>
                </CardHeader>
                <Droppable droppableId={stage.id}>
                  {(provided, snapshot) => (
                    <CardContent 
                      ref={provided.innerRef}
                      {...provided.droppableProps}
                      className={`p-2 min-h-[400px] max-h-[600px] overflow-y-auto ${
                        snapshot.isDraggingOver ? 'bg-gray-50' : ''
                      }`}
                    >
                      {stage.candidates.map((candidate, index) => (
                        <Draggable 
                          key={candidate.id} 
                          draggableId={candidate.id} 
                          index={index}
                        >
                          {(provided, snapshot) => (
                            <div
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                              className={`mb-2 p-3 bg-white rounded-lg border shadow-sm hover:shadow-md transition-shadow cursor-move ${
                                snapshot.isDragging ? 'shadow-lg' : ''
                              }`}
                            >
                              <p className="font-medium text-sm truncate">
                                {candidate.name}
                              </p>
                              <p className="text-xs text-gray-600 truncate">
                                {candidate.position}
                              </p>
                              <p className="text-xs text-gray-500 truncate">
                                {candidate.client}
                              </p>
                              <div className="flex items-center gap-2 mt-2">
                                <Badge variant="outline" className="text-xs">
                                  <MapPin size={10} className="mr-1" />
                                  {candidate.location}
                                </Badge>
                              </div>
                              
                              {/* Quick Actions Dropdown */}
                              <Select
                                onValueChange={(action) => performAction(action, candidate, stage)}
                              >
                                <SelectTrigger className="mt-2 h-7 text-xs">
                                  <SelectValue placeholder="Quick action" />
                                </SelectTrigger>
                                <SelectContent>
                                  {stage.actions.map(action => (
                                    <SelectItem key={action} value={action}>
                                      {action}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                          )}
                        </Draggable>
                      ))}
                      {provided.placeholder}
                    </CardContent>
                  )}
                </Droppable>
              </Card>
              {index < stages.length - 1 && (
                <ChevronRight className="inline-block mx-2 mt-32 text-gray-400" size={24} />
              )}
            </div>
          ))}
        </div>
      </DragDropContext>

      {/* Action Dialog */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Schedule Interview</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label>Candidate</Label>
              <p className="font-medium">{selectedCandidate?.name}</p>
            </div>
            <div>
              <Label htmlFor="interview-date">Interview Date</Label>
              <Input id="interview-date" type="datetime-local" />
            </div>
            <div>
              <Label htmlFor="interview-notes">Notes</Label>
              <Textarea id="interview-notes" placeholder="Add interview notes..." />
            </div>
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
                Cancel
              </Button>
              <Button onClick={() => {
                toast({
                  title: "Interview Scheduled",
                  description: `Interview scheduled for ${selectedCandidate?.name}`
                })
                setIsDialogOpen(false)
              }}>
                Schedule
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}